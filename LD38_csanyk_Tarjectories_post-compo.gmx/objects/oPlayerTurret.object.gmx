<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spPlayerTurret</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up player
gun = instance_create(x, y, oGun);
/*
ELEVATION
         0 = pointing straight "up" relative to planet's surface
         + 90 = adjustment so that dashboard 90 = pointing straight "up"
         90 - elevation = -13.50 = minimum elevation for shooting CCW
         90 - elevation = 193.50 = minimum elevatoin for shooting CW
         true elevation then ranges from -103.5, 103.5
*/
elevation = 0;  
shot_power = 1;
l_acc = 0.1;
r_acc = 0.1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(gun) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reposition gun relative to world spin
gun.x = x;
gun.y = y;
gun.image_angle = image_angle + elevation;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control inputs
left = INPUT_LEFT;
right = INPUT_RIGHT;

if left  {elevation += l_acc; l_acc += PLAYER_ACC_INCREMENT; l_acc = clamp(l_acc, PLAYER_ACC_MIN, PLAYER_ACC_MAX);}else l_acc = PLAYER_ACC_MIN;
if right {elevation -= r_acc; r_acc += PLAYER_ACC_INCREMENT; r_acc = clamp(r_acc, PLAYER_ACC_MIN, PLAYER_ACC_MAX);}else r_acc = PLAYER_ACC_MIN;

elevation = clamp(elevation, GUN_ELEVATION_MIN, GUN_ELEVATION_MAX);

up = INPUT_UP;
down = INPUT_DOWN;

if up   shot_power += SHOT_POWER_INCREMENT;
if down shot_power -= SHOT_POWER_INCREMENT;

shot_power = clamp(shot_power, SHOT_POWER_MIN, SHOT_POWER_MAX);

shoot = INPUT_SHOOT;

if shoot &amp;&amp; CAN_SHOOT
{
    audio_sound_gain(snGunShot, shot_power * 0.2, 0);
    audio_play_sound(snGunShot, 1, false);

    b = instance_create(x + lengthdir_x(48 + max(8, 8*shot_power), gun.image_angle), 
                        y + lengthdir_y(48 + max(8, 8*shot_power), gun.image_angle), 
                        oBullet);
    b.gravity     = oPlanet.g_force;  //Gravity should vary with planet radius
    b.speed       = 5 * shot_power; //Speed should vary with turret shot_power
    b.direction   = gun.image_angle;
    b.image_angle = gun.image_angle;
    
    with global.dashboard
    {
        total_shots++;
        level_shots[global.level]++;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw shot_power meter
draw_set_color(c_red);
draw_line_width(view_xview[0] + 600, view_yview[0] + 700, view_xview[0] + 600 + (4 * shot_power * 10), view_yview[0] + 700, 10);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
