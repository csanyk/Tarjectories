<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spPlanet</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set up world sprite
sprite_setup = false;
radius = irandom_range(PLANET_RADIUS_MIN,PLANET_RADIUS_MAX);

//set up spin
spin = choose(-1,1) * random_range(PLANET_SPIN_MIN, PLANET_SPIN_MAX);

//set up gravity
g_force = PLANET_GRAVITY;//0.3 * (power(1.5 * radius / 300, 2));

//set up color
color = PLANET_COLOR;//make_color_hsv(PLANET_C_HUE, PLANET_C_SAT, PLANET_C_VAL);

//Set up player
player = noone; //we now create the player instance outside of the object, so that we can  have multiple planets, yet just one player instance.

//Set up targets 
targets_number = PLANET_TARGETS_NUMBER;//(global.level mod 9 div 3) + 1; 
if global.level == 18 targets_number = 4;
for (var i = 0; i &lt; targets_number; i++)
{
    var t_angle = irandom_range(T_ANGLE_MIN, T_ANGLE_MAX);
    target[i] = instance_create(lengthdir_x(radius, t_angle), lengthdir_y(radius, t_angle), oTarget);
    target[i].t_angle = t_angle;
    target[i].parent = id;
}

//Set up eyes
if global.eyes_unlocked planet_eyes_init();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_delete(sprite_index);

if global.eyes_unlocked
{
    with left_eye 
    {
        instance_destroy();
    }
    with right_eye 
    {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Make the world go round
image_angle += spin;

if instance_exists(player)
{
    player.x = x + lengthdir_x(radius + 8, image_angle);
    player.y = y + lengthdir_y(radius + 8, image_angle);
    player.image_angle = image_angle;
}


for (var i = 0; i &lt; targets_number; i++)
{
    if instance_exists(target[i])
    {
        target[i].x = x + lengthdir_x(radius + 8, image_angle + target[i].t_angle);
        target[i].y = y + lengthdir_y(radius + 8, image_angle + target[i].t_angle);
        target[i].image_angle = image_angle + target[i].t_angle;
    }
}

//keep eyes in sync with planet in case planet moved. (Should only happen if planets collide and have to re-adjust.)
if global.eyes_unlocked
{
    left_eye.x = x - (0.4 * radius);
    left_eye.y = y - (0.25 * radius);
    
    right_eye.x = x + (0.4 * radius)
    right_eye.y = y - (0.25 * radius);
}


//Manage level timer TODO: remove from planet object, so 2-planet levels don't double-decrement the timer.
if !instance_exists(oLevelUp)
{
    with global.dashboard
    {
        level_timer[global.level]--;
        level_timer[global.level] = max(0, level_timer[global.level]);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oPlanet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_random(irandom_range(radius + 50, 2 *radius), irandom_range(radius + 50, 2*radius));

x = clamp(x, 2*radius, room_width - (2*radius));
y = clamp(y, 2*radius, room_height - (2*radius));    

if !instance_exists(oPlanet_averager) instance_create(0, 0, oPlanet_averager);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !sprite_setup
{
    //Set up world sprite
    s = surface_create(1024,1024);
    surface_set_target(s);
    draw_clear_alpha(c_white, 0);
    draw_set_color(color);
    draw_circle(512, 512, radius, false);
    surface_reset_target();
    sprite_index = sprite_create_from_surface(s, 0, 0, 1024, 1024, true, false, 512, 512);
    surface_free(s);
    sprite_setup = true;
}
else
{
    draw_self();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
