<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.planet = 0; // clear array of planets from the just-completed level
tick = 0.75; //adjust seconds per second by this fraction for the countdown display, etc.

congratulation = "";
text = "";

//Compose level end text

if (global.dashboard.level_misses[global.level] == 0)
{
    perfect_bonus = power(5000 * global.dashboard.level_hits[global.level], instance_number(oPlanet)); //if you get a perfect score on a multi-planet level, you deserve it
    score += perfect_bonus;
    
    congratulation = "Superb! ";
    congratulation += "PERFECT Bonus: " + string(perfect_bonus) + "!!!!##";
}
else 
{
    level_bonus = round(global.dashboard.level_points[global.level] * 
                         (global.dashboard.level_hits[global.level] / 
                          global.dashboard.level_shots_fired[global.level]                           
                         )
                       );
    score += level_bonus;

    congratulation = "Success!##";
    congratulation += "Level " + string(global.level) + " points: "  + string(global.dashboard.level_points[global.level]) + 
                      "##Accuracy: " + 
                      string(global.dashboard.level_hits[global.level]) + "/" + string(global.dashboard.level_shots_fired[global.level]) + "#" +
                      "Level Bonus: " + string(global.dashboard.level_points[global.level]) + " x " + 
                      string_format(global.dashboard.level_hits[global.level] / global.dashboard.level_shots_fired[global.level] * 100, 2, 0) + 
                      "% = " + string(level_bonus);
}

par_bonus = ((max(0, PAR - global.dashboard.level_shots_fired[global.level]) * 1000) div 1000) * 1000;
score += par_bonus;
congratulation += "##Par bonus: " + string(par_bonus);

text = congratulation + "###Advance to next level!###";

countdown_start = false;

alarm[1]= 1 * room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>text += "Press a key to continue...";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Advance the level
global.level++;

if (global.level != LAST_LEVEL) {audio_play_sound(snTimerBeep2, 1, false);}

with(global.dashboard)
{
    level_shots_fired[global.level]  = 0;
    level_hits[global.level]         = 0;
    level_misses[global.level]       = 0;
    level_near_misses[global.level]  = 0;
    level_points[global.level]       = 0;
}



//Capture the level data
//with(oLevel_data_manager) instance_destroy(); // Destroy the old one.
//instance_create(10, 640, oLevel_data_manager); // Create a new one to capture the fresh level data.

//Destroy the Level Up object

room_restart();
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_black);
draw_set_alpha(0.2);
draw_rectangle(0, 0, view_wport[0], view_hport[0], false);

draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_color(c_yellow);
draw_set_alpha(1);
draw_set_font(fnDashboard);
draw_text(view_wport[0] * 0.5, view_hport[0] * 0.5, text); 


if countdown_start &amp;&amp; (global.level != LAST_LEVEL)
{
    countdown = (alarm[0] div (tick * room_speed)) + 1;
    if alarm[0] mod (tick * room_speed) == 0 audio_play_sound(snTimerBeep1, 1, false);

    draw_set_font(fnCountdown);
    draw_text(view_wport[0] * 0.5, view_hport[0] * 0.5, string(countdown));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if alarm[1] == -1 and !countdown_start
{
    if debug_mode 
    {
        alarm[0] = 1 
    }
    else 
    {
        if global.level == (LAST_LEVEL - 1)
        {
            alarm[0] = 1;
        }
        else
        {
            alarm[0] = tick * room_speed * 3;
        }
    }
    text = "";
    countdown_start = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
